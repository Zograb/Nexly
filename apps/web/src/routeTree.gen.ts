/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedSettingsRouteImport } from './routes/_protected/settings'
import { Route as ProtectedNoteNoteIdRouteImport } from './routes/_protected/note/$noteId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSettingsRoute = ProtectedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedNoteNoteIdRoute = ProtectedNoteNoteIdRouteImport.update({
  id: '/note/$noteId',
  path: '/note/$noteId',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/settings': typeof ProtectedSettingsRoute
  '/': typeof ProtectedIndexRoute
  '/note/$noteId': typeof ProtectedNoteNoteIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/settings': typeof ProtectedSettingsRoute
  '/': typeof ProtectedIndexRoute
  '/note/$noteId': typeof ProtectedNoteNoteIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/_protected/settings': typeof ProtectedSettingsRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/note/$noteId': typeof ProtectedNoteNoteIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/settings' | '/' | '/note/$noteId'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/settings' | '/' | '/note/$noteId'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/_protected/settings'
    | '/_protected/'
    | '/_protected/note/$noteId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/note/$noteId': {
      id: '/_protected/note/$noteId'
      path: '/note/$noteId'
      fullPath: '/note/$noteId'
      preLoaderRoute: typeof ProtectedNoteNoteIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedSettingsRoute: typeof ProtectedSettingsRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedNoteNoteIdRoute: typeof ProtectedNoteNoteIdRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedSettingsRoute: ProtectedSettingsRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedNoteNoteIdRoute: ProtectedNoteNoteIdRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
